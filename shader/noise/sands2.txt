// Copyright (c) 2021 Lachlan McDonald
// This work is licensed under the MIT License (MIT)
// https://github.com/lachlanmcdonald/magicavoxel-shaders
//
// xs_begin
// author : '@lachlanmcdonald'
// arg : { name = 'Scale'  var = 'm_scale'  range = '1 300'  value = '50'  step = '5'  precision = '0' }
// arg : { name = 'Gain'  var = 'm_gain'  range = '0 80'  value = '65'  step = '1'  precision = '0' }
// arg : { name = 'Lacunarity'  var = 'm_lacunarity'  range = '0 300'  value = '201'  step = '1'  precision = '0' }
// arg : { name = 'Multiply'  var = 'm_multiply'  range = '-0.5 3'  value = '1'  step = '0.05'  precision = '2' }
// xs_end

float gain = m_gain / 100.0;
float lacunarity = m_lacunarity / 100.0;

// perlin noise function by https://github.com/ashima/webgl-noise
vec3 mod289(vec3 x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
	return mod289(((x * 34.0) + 1.0) * x);
}

float snoise(vec2 v) {
	const vec4 C = vec4(0.211324865405187,
                        0.366025403784439,
                       -0.577350269189626,
                        0.024390243902439);

	vec2 i = floor(v + dot(v, C.yy));
	vec2 x0 = v - i + dot(i, C.xx);

	vec2 i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
	vec4 x12 = x0.xyxy + C.xxzz;
	x12.xy -= i1;

	i = mod289(i);
	vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0)) + i.x + vec3(0.0, i1.x, 1.0));

	vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0);
	m = m * m;
	m = m * m;

	vec3 x = 2.0 * fract(p * C.www) - 1.0;
	vec3 h = abs(x) - 0.5;
	vec3 ox = floor(x + 0.5);
	vec3 a0 = x - ox;

	m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);

	vec3 g = vec3(a0.x * x0.x + h.x * x0.y,
				  a0.yz * x12.xz + h.yz * x12.yw);
	return m_scale * dot(m, g);
}

// fbm function by https://code.google.com/p/fractalterraingeneration/wiki/Fractional_Brownian_Motion
float fbm(vec2 uv) {
    float total = 0.0;
    float frequency = 0.5;
    float amplitude = gain;

    uv = uv * 5.0;
    total = snoise(uv);

    for (int i = 0; i < 10; i++) {
        total += snoise(uv * frequency) * amplitude;
        frequency *= lacunarity;
        amplitude *= gain;
    }

    // return (total + 2.0) / 4.0;
	return total;
}

float pattern(vec2 p) {
    return fbm(p + fbm(p + fbm(p)));
}

float pal(float p) {
	float f = floor(mix(0.0, float(i_num_color_sels), p));
	return color_sel(f);
}

float map(vec3 v) {
	vec3 uv = floor(v) / i_volume_size;
	float f = pattern(uv.xy / 900.0);

	return pal(clamp(f, 0.0, 1.0));
}
