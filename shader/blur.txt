// Copyright (c) 2021 Lachlan McDonald
// This work is licensed under the MIT License (MIT)
// https://github.com/lachlanmcdonald/magicavoxel-shaders
//
// xs slice_z [Offset] [Count]
//
// xs_begin
// author : '@lachlanmcdonald'
// arg : { name = 'Offset'  var = 'm_offset'  range = '0 256'  value = '0'  step = '1'  precision = '0' }
// arg : { name = 'Count'  var = 'm_count'  range = '0 256'  value = '0'  step = '1'  precision = '0' }
// xs_end

float offset = m_count;

bool isSelectedPal(float p) {
	for (int i = 0; i < i_num_color_sels; i += 1) {
		if (p == color_sel(float(i))) {
			return true;
		}
	}
	return false;
}

vec3 rgb2hsv(vec3 c) {
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c) {
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

float adjacentAverage(vec3 co) {
	vec3 d = rgb2hsv(palette(co).rgb);
	float n = 1.0;

	for (float x = -1.0; x <= 1.0; x += 1.0) {
		for (float y = -1.0; y <= 1.0; y += 1.0) {
			for (float z = -1.0; z <= 1.0; z += 1.0) {
				vec3 p = co + vec3(x, y, z);

				if (all(greaterThanEqual(p, vec3(0.0)))) {
					if (isSelectedPal(voxel(p))) {
						d += rgb2hsv(palette(p).rgb);
						n += 1.0;
					}
				}
			}
		}
	}

	return d / n;
}

vec3 nearestMatch(float index, vec3 col) {
	float lastDistance = 1.0;

	for (int i = 1; i <= 255.0; i++) {
		if (float(i) != index) {
			vec3 z = rgb2hsv(palette(float(i)).rgb);
			float d = distance(col, z);

			if (d < lastDistance) {
				index = i;
				col = z;
			}
		}
	}

	return index;
}

float map(vec3 v) {
	vec3 d = rgb2hsv(vec3(1.0, 0.0, 0.0));
	return nearestMatch(0.0, d);

	// float index = voxel(v);
	// if (isSelectedPal(index)) {
	// 	vec3 d = adjacentAverage(v);
	// 	return nearestMatch(index, d);
	// }
	// return index;
}
